package me.gamrboy4life.paradox.mods.impl;

import java.util.ArrayDeque;
import java.util.Deque;

import org.lwjgl.input.Mouse;

import me.gamrboy4life.paradox.gui.hud.ScreenPosition;
import me.gamrboy4life.paradox.mods.ModDraggable;
import net.minecraft.client.gui.FontRenderer;

public class ModCPS extends ModDraggable {
    private Deque<Long> leftClicks = new ArrayDeque<Long>();
    private Deque<Long> rightClicks = new ArrayDeque<Long>();
    private boolean wasLeftPressed;
    private boolean wasRightPressed;
    private long lastLeftPressed;
    private long lastRightPressed;
    private FontRenderer font;

    @Override
    public int getWidth() {
        return font.getStringWidth("CPS: 00 / 00");
    }

    @Override
    public int getHeight() {
        return font.FONT_HEIGHT;
    }

    @Override
    public void render(ScreenPosition pos) {
        final boolean leftPressed = Mouse.isButtonDown(0);
        final boolean rightPressed = Mouse.isButtonDown(1);

        if (leftPressed != this.wasLeftPressed) {
            this.lastLeftPressed = System.currentTimeMillis();
            this.wasLeftPressed = leftPressed;
            if (leftPressed) {
                this.leftClicks.add(this.lastLeftPressed);
            }
        }

        if (rightPressed != this.wasRightPressed) {
            this.lastRightPressed = System.currentTimeMillis();
            this.wasRightPressed = rightPressed;
            if (rightPressed) {
                this.rightClicks.add(this.lastRightPressed);
            }
        }

        font.drawString("CPS: " + getCPS(leftClicks) + " / " + getCPS(rightClicks), pos.getAbsoluteX(), pos.getAbsoluteY(), -1);
    }

    private int getCPS(Deque<Long> clicks) {
        final long time = System.currentTimeMillis();
        for (Long clickTime : clicks) {
            if (clickTime + 1000 < time) {
                clicks.removeFirst(); // Using removeFirst() to avoid ConcurrentModificationException
            } else {
                break;
            }
        }
        return clicks.size();
    }

    @Override
    public void renderDummy(ScreenPosition pos) {
        final boolean leftPressed = Mouse.isButtonDown(0);
        final boolean rightPressed = Mouse.isButtonDown(1);

        if (leftPressed != this.wasLeftPressed) {
            this.lastLeftPressed = System.currentTimeMillis();
            this.wasLeftPressed = leftPressed;
            if (leftPressed) {
                this.leftClicks.add(this.lastLeftPressed);
            }
        }

        if (rightPressed != this.wasRightPressed) {
            this.lastRightPressed = System.currentTimeMillis();
            this.wasRightPressed = rightPressed;
            if (rightPressed) {
                this.rightClicks.add(this.lastRightPressed);
            }
        }

        font.drawString("CPS: " + getCPS(leftClicks) + " / " + getCPS(rightClicks), pos.getAbsoluteX(), pos.getAbsoluteY(), -1);
    }

    @Override
    public boolean isEnabled() {
        return true; // Modify as needed based on your logic
    }
}