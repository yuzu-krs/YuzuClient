package me.gamrboy4life.paradox.mods.impl;

import java.awt.Color;
import java.text.DecimalFormat;

import org.lwjgl.opengl.GL11;

import me.gamrboy4life.paradox.gui.hud.ScreenPosition;
import me.gamrboy4life.paradox.mods.ModDraggable;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.WorldRenderer;
import net.minecraft.client.renderer.entity.RenderTNTPrimed;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.entity.item.EntityTNTPrimed;

public class ModTNTCountdown extends ModDraggable {

	   DecimalFormat timeFormatter = new DecimalFormat("0.00");

	    @Override
	    public int getWidth() {
	        return mc.fontRendererObj.getStringWidth("\2476[ \247cT\2474N\247cT \2477Countdown \2476]\247r");
	    }

	    @Override
	    public int getHeight() {
	        return mc.fontRendererObj.FONT_HEIGHT;
	    }

	    @Override
	    public void render(ScreenPosition pos) {
	        mc.fontRendererObj.drawStringWithShadow("\2476[ \247cT\2474N\247cT \2477Countdown \2476]\247r", pos.getAbsoluteX() + 1, pos.getAbsoluteY() + 1, -1);
	    }

	    public void renderTag(RenderTNTPrimed tntRenderer, EntityTNTPrimed tntPrimed, double x, double y, double z, float partialTicks) {
	        if (!this.isEnabled()) {
	            return;
	        }

	        final int fuseTimer = tntPrimed.fuse;
	        if (fuseTimer < 1) return;

	        double distance = tntPrimed.getDistanceSqToEntity(tntRenderer.getRenderManager().livingPlayer);
	        if (distance <= 4096D) {
	            float number = (fuseTimer - partialTicks) / 20F;
	            String time = this.timeFormatter.format(number);
	            FontRenderer fontrenderer = tntRenderer.getFontRendererFromRenderManager();
	            GlStateManager.pushMatrix();
	            GlStateManager.translate((float) x + 0.0F, (float) y + tntPrimed.height + 0.5F, (float) z);
	            GL11.glNormal3f(0.0F, 1.0F, 0.0F);
	            GlStateManager.rotate(-tntRenderer.getRenderManager().playerViewY, 0.0F, 1.0F, 0.0F);

	            int xMultiplier = 1; // Nametag x rotations should flip in front-facing 3rd person
	            if (mc.gameSettings.thirdPersonView == 2) {
	                xMultiplier = -1;
	            }

	            float scale = 0.02666667f;
	            GlStateManager.rotate(tntRenderer.getRenderManager().playerViewX * xMultiplier, 1.0F, 0.0F, 0.0F);
	            GlStateManager.scale(-scale, -scale, scale);
	            GlStateManager.disableLighting();
	            GlStateManager.depthMask(false);
	            GlStateManager.disableDepth();
	            GlStateManager.enableBlend();
	            GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
	            Tessellator tessellator = Tessellator.getInstance();
	            WorldRenderer worldrenderer = tessellator.getWorldRenderer();
	            int stringWidth = fontrenderer.getStringWidth(time) >> 1;

	            float green = Math.min(fuseTimer / 80f, 1f);
	            Color color = new Color(1f - green, green, 0f);
	            GlStateManager.enableDepth();
	            GlStateManager.depthMask(true);
	            GlStateManager.disableTexture2D();
	            worldrenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
                 
            worldrenderer.pos(-stringWidth - 1, -1, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
            worldrenderer.pos(-stringWidth - 1, 8, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
            worldrenderer.pos(stringWidth + 1, 8, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
            worldrenderer.pos(stringWidth + 1, -1, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
            tessellator.draw();
            GlStateManager.enableTexture2D();
            fontrenderer.drawString(time, -fontrenderer.getStringWidth(time) >> 1, 0, color.getRGB());
            GlStateManager.enableLighting();
            GlStateManager.disableBlend();
            GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
            GlStateManager.popMatrix();
        }
    }

	@Override
	public void renderDummy(ScreenPosition pos) {
		// TODO 自動生成されたメソッド・スタブ
		
	}

	@Override
	public boolean isEnabled() {
		// TODO 自動生成されたメソッド・スタブ
		return true;
	}

}