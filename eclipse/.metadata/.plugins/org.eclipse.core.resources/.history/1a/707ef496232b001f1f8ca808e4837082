package me.gamrboy4life.paradox.mods.impl;

import java.awt.event.KeyEvent;

import me.gamrboy4life.paradox.gui.hud.ScreenPosition;
import me.gamrboy4life.paradox.gvent.GventTarget;
import me.gamrboy4life.paradox.mods.ModDraggable;

public class ModPerspective extends ModDraggable {
    private boolean returnOnRelease = true; // hold down the key = true 
    private boolean perspectiveToggled = false;
    
    private float cameraYaw=0F;
    private float cameraPitch=0F;
    private int previousPerspective=0;
    
    @GventTarget
    public void keyboardEvent(KeyEvent e) {
        if (e.getKey() == mc.gameSettings.CLIENT_PERSPECTIVE.getKeyCode()) {
            if (Keyboard.getEventKeyState()) {
                perspectiveToggled = !perspectiveToggled;
                cameraYaw = mc.thePlayer.rotationYaw;
                cameraPitch = mc.thePlayer.rotationPitch;
                if (perspectiveToggled) {
                    previousPerspective = mc.gameSettings.thirdPersonView;
                    mc.gameSettings.thirdPersonView = 1;
                }
            } else {
                mc.gameSettings.thirdPersonView = previousPerspective;
            }
        } else if (returnOnRelease) {
            perspectiveToggled = false;
            mc.gameSettings.thirdPersonView = previousPerspective;
        }
    }
    

    @Override
    public int getWidth() {
        return font.getStringWidth("[Perspective Toggled]");
    }

    @Override
    public int getHeight() {
        return font.FONT_HEIGHT;
    }

    @Override
    public void render(ScreenPosition pos) {
        if (perspectiveToggled) {
            font.drawString("[Perspective Toggled]", pos.getAbsoluteX(), pos.getAbsoluteY(), -1);
        }
    }

    @Override
    public void renderDummy(ScreenPosition pos) {
        font.drawString("[Perspective Toggled]", pos.getAbsoluteX(), pos.getAbsoluteY(), -1);
    }

	@Override
	public boolean isEnabled() {
		return true;
	}
}