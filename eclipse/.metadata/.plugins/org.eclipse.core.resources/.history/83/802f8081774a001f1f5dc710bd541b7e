package me.gamrboy4life.paradox.command.commands;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.nio.file.Paths;
import java.util.concurrent.TimeUnit;

import me.gamrboy4life.paradox.command.Command;
import net.minecraft.client.Minecraft;
import net.minecraft.network.play.client.C01PacketChatMessage;

public class Tran extends Command {

    private static final String GO_TRAN_DIR = "C:\\Users\\yztim\\myproject\\go-tran\\cmd\\tran";

    public Tran() {
        super("ja", "Tranでja->en", "ja", "j");
    }

    @Override
    public void onCommand(String[] args, String command) {
        if (args.length == 0) {
            Minecraft.getMinecraft().thePlayer.sendQueue.addToSendQueue(new C01PacketChatMessage("Usage: /tran <text>"));
            return;
        }

        String textToTranslate = String.join(" ", args);
        String translatedText = translateText(textToTranslate);
        
        if (translatedText != null) {
            // 出力の先頭から空白までを削除する
            String result = translatedText.trim();
            int firstSpaceIndex = result.indexOf("　");
            if (firstSpaceIndex != -1) {
                result = result.substring(firstSpaceIndex + 1).trim();
            }

            Minecraft.getMinecraft().thePlayer.sendQueue.addToSendQueue(new C01PacketChatMessage(result));
        } else {
            Minecraft.getMinecraft().thePlayer.sendQueue.addToSendQueue(new C01PacketChatMessage("Translation failed."));
        }
    }

    private String translateText(String text) {
        try {
            ProcessBuilder processBuilder = new ProcessBuilder("go", "run", "main.go");
            processBuilder.directory(Paths.get(GO_TRAN_DIR).toFile());  // カレントディレクトリを設定
            processBuilder.redirectErrorStream(true);
            Process process = processBuilder.start();

            // 標準入力にテキストを送信
            OutputStream outputStream = process.getOutputStream();
            outputStream.write(("t ja\n" + text + "\n").getBytes());
            outputStream.flush();
            outputStream.close();

            // 標準出力から翻訳結果を読み取る
            InputStream inputStream = process.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
            process.waitFor(10, TimeUnit.SECONDS);  // プロセスの完了を待機

            return output.toString().trim();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}