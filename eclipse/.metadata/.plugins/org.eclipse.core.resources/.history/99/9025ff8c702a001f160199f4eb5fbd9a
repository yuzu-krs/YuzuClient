package me.gamrboy4life.paradox.module.combat;

import java.util.ArrayList;
import java.util.Iterator;

import de.Hero.settings.Setting;
import me.gamrboy4life.paradox.Paradox;
import me.gamrboy4life.paradox.module.Category;
import me.gamrboy4life.paradox.module.Module;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;

public class Reach extends Module {

    private double reachDistance = 6.0; // デフォルトのリーチ距離

    public Reach() {
        super("Reach", 0, Category.COMBAT);
    }

    @Override
    public void setup() {
        ArrayList<String> options = new ArrayList<String>();
        options.add("Reach Distance");
        Paradox.instance.settingsManager.rSetting(new Setting("Reach Distance", this, reachDistance, 1, 10, false));
    }

    @Override
    public void onUpdate() {
        if (!this.isToggled())
            return;

        reachDistance = Paradox.instance.settingsManager.getSettingByName("Reach Distance").getValDouble();

        // プレイヤーの視線の先にいる最も近い敵を攻撃する
        EntityLivingBase closestEntity = findClosestEntity();

        if (closestEntity != null) {
            mc.playerController.attackEntity(mc.thePlayer, closestEntity);
            mc.thePlayer.swingItem();
        }

        super.onUpdate();
    }

    private EntityLivingBase findClosestEntity() {
        EntityLivingBase closestEntity = null;
        double closestDistanceSq = Double.MAX_VALUE;

        for (Iterator<Entity> entities = mc.theWorld.loadedEntityList.iterator(); entities.hasNext();) {
            Object theObject = entities.next();
            if (theObject instanceof EntityLivingBase) {
                EntityLivingBase entity = (EntityLivingBase) theObject;

                if (entity instanceof EntityPlayerSP)
                    continue;

                if (mc.thePlayer.getDistanceToEntity(entity) <= reachDistance && entity.isEntityAlive()) {
                    double distanceSq = mc.thePlayer.getDistanceSqToEntity(entity);

                    if (distanceSq < closestDistanceSq) {
                        closestDistanceSq = distanceSq;
                        closestEntity = entity;
                    }
                }
            }
        }

        return closestEntity;
    }
}
