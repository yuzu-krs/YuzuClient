package me.gamrboy4life.paradox.gui.hud;

import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Predicate;

import org.lwjgl.input.Keyboard;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.ScaledResolution;

public class HUDConfigScreen extends GuiScreen {
    private final HashMap<IRenderer, ScreenPosition> renderers = new HashMap<IRenderer, ScreenPosition>();
    private Optional<IRenderer> selectedRenderer = Optional.empty();
    private int prevX, prevY;

    public HUDConfigScreen(HUDManager api) {
        Collection<IRenderer> registeredRenderers = api.getRegisteredRenderers();
        for (IRenderer ren : registeredRenderers) {
            if (!ren.isEnabled()) {
                continue;
            }

            ScreenPosition pos = ren.load();
            if (pos == null) {
                pos = ScreenPosition.fromRelativePosition(0.5, 0.5);
            }

            adjustBounds(ren, pos);
            this.renderers.put(ren, pos);
        }
    }
    
    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        super.drawDefaultBackground();
        final float zBackup = this.zLevel;
        this.zLevel = 200;
        this.drawHollowRect(0, 0, this.width - 1, this.height - 1, 0xFFFF0000);
        
        for (IRenderer renderer : renderers.keySet()) {
            ScreenPosition pos = renderers.get(renderer);
            
            renderer.renderDummy(pos);
            this.drawHollowRect(pos.getAbsoluteX(), pos.getAbsoluteY(), renderer.getWidth(), renderer.getHeight(),0xFF00FFFF);
        }

        // HUDManagerのインスタンスを取得し、登録されているIRendererを描画する
        HUDManager.getInstance().getRegisteredRenderers().forEach(new Consumer<IRenderer>() {
			@Override
			public void accept(IRenderer renderer) {
			    ScreenPosition pos = renderers.get(renderer);
			    if (pos != null) {
			        renderer.render(pos);
			    }
			}
		});
    }
    
    private void drawHollowRect(int x, int y, int w, int h, int color) {
        this.drawHorizontalLine(x, x + w, y, color);
        this.drawHorizontalLine(x, x + w, y + h, color);
        this.drawVerticalLine(x, y + h, y, color);
        this.drawVerticalLine(x + w, y + h, y, color);
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        super.keyTyped(typedChar, keyCode);
        System.out.println("Key typed: " + typedChar + ", Key code: " + keyCode);
        
        if (keyCode == Keyboard.KEY_ESCAPE) {
            renderers.entrySet().forEach(new Consumer<Entry<IRenderer, ScreenPosition>>() {
                @Override
                public void accept(Entry<IRenderer, ScreenPosition> entry) {
                    entry.getKey().save(entry.getValue());
                }
            });
            this.mc.displayGuiScreen(null);
        }
    }

    @Override
    protected void mouseClicked(int x, int y, int mobuttonuseButton) throws IOException {
        super.mouseClicked(x, y, mobuttonuseButton);
        System.out.println("Mouse clicked at: " + x + ", " + y);
        
        this.prevX = x;
        this.prevY = y;
        loadMouseOver(x, y);
    }

    private void moveSelectedRenderBy(int offsetX, int offsetY) {
        if (!selectedRenderer.isPresent()) {
            return;
        }
        
        IRenderer renderer = selectedRenderer.get();
        ScreenPosition pos = renderers.get(renderer);
        pos.setAbsolute(pos.getAbsoluteX() + offsetX, pos.getAbsoluteY() + offsetY);
        adjustBounds(renderer, pos);
    }
    private boolean isMouseOver(IRenderer renderer, int mouseX, int mouseY) {
        ScreenPosition pos = renderers.get(renderer);
        int absoluteX = pos.getAbsoluteX();
        int absoluteY = pos.getAbsoluteY();
        return mouseX >= absoluteX && mouseX <= absoluteX + renderer.getWidth() &&
               mouseY >= absoluteY && mouseY <= absoluteY + renderer.getHeight();
    }
    @Override
    protected void mouseClickMove(int x, int y, int button, long time) {
        if (selectedRenderer.isPresent()) {
            moveSelectedRenderBy(x - prevX, y - prevY);
        }
        this.prevX = x;
        this.prevY = y;
        
    }
    

    @Override
    public void onGuiClosed() {
        for (IRenderer renderer : renderers.keySet()) {
            renderer.save(renderers.get(renderer));
        }
    }

    @Override
    public boolean doesGuiPauseGame() {
        return true;
    }
    
    
    private void adjustBounds(IRenderer renderer, ScreenPosition pos) {
        ScaledResolution res = new ScaledResolution(Minecraft.getMinecraft());
        int screenWidth = res.getScaledWidth();
        int screenHeight = res.getScaledHeight();
        int absoluteX = Math.max(0, Math.min(pos.getAbsoluteX(), Math.max(screenWidth - renderer.getWidth(), 0)));
        int absoluteY = Math.max(0, Math.min(pos.getAbsoluteY(), Math.max(screenHeight - renderer.getHeight(), 0)));
        pos.setAbsolute(absoluteX, absoluteY);
    }

  

    private class MouseOverFinder implements Predicate<IRenderer> {
        private int mouseX, mouseY;

        public MouseOverFinder(int x, int y) {
            this.mouseX = x;
            this.mouseY = y;
        }

        @Override
        public boolean test(IRenderer renderer) {
            ScreenPosition pos = renderers.get(renderer);
            int absoluteX = pos.getAbsoluteX();
            int absoluteY = pos.getAbsoluteY();
            	if (mouseX >= absoluteX && mouseX <= absoluteX + renderer.getWidth() ) {
            	    if(mouseY >= absoluteY && mouseY <= absoluteY + renderer.getHeight()) {
            	    	return true;
            	    }
            	}
            	return false;
        }
    }
    
}






