package me.gamrboy4life.paradox.mods.impl;

import java.awt.Color;

import org.lwjgl.opengl.GL11;

import me.gamrboy4life.paradox.gui.hud.ScreenPosition;
import me.gamrboy4life.paradox.mods.ModDraggable;
import net.minecraft.client.Minecraft;
import net.minecraft.client.settings.KeyBinding;


public class ModKeystrokes extends ModDraggable {
    public static enum KeystrokesMode {

        WSAD(Key.W, Key.A, Key.S, Key.D),
        WSAD_MOUSE(Key.W, Key.A, Key.S, Key.D, Key.LMB, Key.RMB),
        WSAD_SPRINT(Key.W, Key.A, Key.S, Key.D, new Key("Sprint", Minecraft.getMinecraft().gameSettings.keyBindSprint, 1, 41, 58, 18)),
        WSAD_SPRINT_MOUSE(Key.W, Key.A, Key.S, Key.D, Key.LMB, Key.RMB, new Key("Sprint", Minecraft.getMinecraft().gameSettings.keyBindSprint, 1, 61, 58, 18))
        ;

        private final Key[] keys;
        private int width;
        private int height;

        private KeystrokesMode(Key... keysIn) {
            this.keys = keysIn;

            for(Key key : keys) {
                this.width = Math.max(this.width, key.getX() + key.getWidth());
                this.height = Math.max(this.height, key.getY() + key.getHeight());
            }
        }

        public int getHeight() {
            return height;
        }

        public int getWidth() {
            return width;
        }

        public Key[] getKeys() {
            return keys;
        }
    }

    private static class Key {
        static Minecraft mc = Minecraft.getMinecraft();
        private static final Key W = new Key("W", mc.gameSettings.keyBindForward, 21, 1, 18, 18);
        private static final Key A = new Key("A", mc.gameSettings.keyBindLeft, 1, 21, 18, 18);
        private static final Key S = new Key("S", mc.gameSettings.keyBindBack, 21, 21, 18, 18);
        private static final Key D = new Key("D", mc.gameSettings.keyBindRight, 41, 21, 18, 18);

        private static final Key LMB = new Key("LMB", mc.gameSettings.keyBindAttack, 1, 41, 28, 18);
        private static final Key RMB = new Key("RMB", mc.gameSettings.keyBindUseItem, 31, 41, 28, 18);

        private final String name;
        private final KeyBinding keyBind;
        private final int x;
        private final int y;
        private final int width;
        private final int height;

        public Key(String name, KeyBinding keyBind, int x, int y, int width, int height) {
            this.name = name;
            this.keyBind = keyBind;
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        }

        public boolean isDown() {
            return keyBind.isKeyDown();
        }

        public String getName() {
            return name;
        }
        public int getX() {
            return x;
        }
        public int getY() {
            return y;
        }
        public int getWidth() {
            return width;
        }
        public int getHeight() {
            return height;
        }
    }

    private ScreenPosition pos;
    private KeystrokesMode mode = KeystrokesMode.WSAD_MOUSE;

    public KeystrokesMode getMode() {
        return mode;
    }

    public void setMode(KeystrokesMode mode) {
        this.mode = mode;
    }

    @Override
    public int getWidth() {
        return mode.getWidth();
    }

    @Override
    public int getHeight() {
        return mode.getHeight();
    }

    @Override
    public void render(ScreenPosition pos) {
        GL11.glPushMatrix();

        for(Key key : mode.getKeys()) {
            int textWidth = font.getStringWidth(key.getName());

            int color;
            if(key.isDown()) {
                color = new Color(255, 255, 255, 102).getRGB();
            } else {
                color = new Color(0, 0, 0, 102).getRGB();
            }

            
//            Gui.drawRect(
//                    pos.getAbsoluteX() + key.getX(),
//                    pos.getAbsoluteY() + key.getY(),
//                    pos.getAbsoluteX() + key.getX() + key.getWidth(),
//                    pos.getAbsoluteY() + key.getY() + key.getHeight(),
//                    color
//            );

            font.drawString(
                    key.getName(),
                    pos.getAbsoluteX() + key.getX() + key.getWidth() / 2 - textWidth / 2,
                    pos.getAbsoluteY() + key.getY() + key.getHeight() / 2 - 4,
                    key.isDown() ? Color.BLACK.getRGB() : Color.WHITE.getRGB()
            );
        }

        GL11.glPopMatrix();;
    }

	@Override
	public void renderDummy(ScreenPosition pos) {
		// TODO 自動生成されたメソッド・スタブ
		
	}

	@Override
	public boolean isEnabled() {
		// TODO 自動生成されたメソッド・スタブ
		return false;
	}
}